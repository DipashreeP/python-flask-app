pipeline {
    environment {
        registry = "dipashreep/python-flask-app"
        registryCredential = "dockerhub_id"
        dockerImage = ''
    }
    agent any
    stages {
        stage('Cloning the Code') {
            steps {
                echo 'Cloning the Code from Git'
                git branch:'main', url: 'https://github.com/DipashreeP/python-flask-app-2.git'
            }
        }
        stage('SCA using Bandit') {
            steps {
                echo 'Scanning the Source Code using Bandit'
                sh 'docker run --user $(id -u):$(id -g) -v $(pwd):/src --rm secfigo/bandit bandit -r /src -f json -o /src/bandit-output.json | exit 0'
            }
        }       
        stage('Testing') {
            parallel {
                stage('SCA using Bandit') {
                    steps {
                        echo 'Scanning the Source Code using Bandit'
                        sh 'docker run --user $(id -u):$(id -g) -v $(pwd):/src --rm secfigo/bandit bandit -r /src -f json -o /src/bandit-output.json | exit 0'
                    }
                }
                stage('Git Secret using TruffleHog') {
                    steps {
                        echo 'Scan the git repo using Trufflehog'
                        sh 'docker run --user $(id -u):$(id -g) --rm -v "$(pwd):/proj" dxa4481/trufflehog file:///proj --json | tee trufflehog-output.json'
                    }
                }
                stage('Flake8') {
                    steps {
                        echo 'Flake8 Scaning'
                        sh 'docker run -ti --rm -v $(pwd):/apps alpine/flake8:3.5.0 flake8 . --format=json --output-file flake8-output.json | exit 0'

                        // sh 'python3 -m flake8 . --format=json --output-file flake8-output.json --exit-zero'
                    }
                }

                stage('Dockerlint') {
                    steps {
                        echo 'Dockerlint Scaning'
                        sh 'docker run --user $(id -u):$(id -g) -it --rm -v "$PWD/Dockerfile":/Dockerfile:ro redcoolbeans/dockerlint | tee dockerlint-output.json'
                    }
                }
                stage('Hadolint') {
                    steps {
                        echo 'Hadolint Scaning'
                        sh 'docker run --user $(id -u):$(id -g) -it --rm -v "$PWD/Dockerfile":/Dockerfile:ro hadolint/hadolint hadolint Dockerfile | tee hadolint-output.json'
                    }
                }
                
            }
        }    
        stage('Check for passwords injection') {
            steps {
                echo 'Scanning the Source Code for plaintext passwords'
                sh 'docker run -user $(id -u):$(id -g) --rm -v "$(pwd):/proj" dxa4481/trufflehog file:///proj --json | tee trufflehog-output.json'
            }
        }   
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('',registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Delete Docker Image from Local Computer') {
            steps {
                echo 'Deleting the Docker Image'
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
        }
        stage('Deploy to Kubernetes Dev Environment') {
            steps {
                echo 'Deploy the App using Kubectl'
                //sh "sed -i 's/BUILDNUMBER/$BUILD_NUMBER/g' python-flask-deployment.yml"
                sh "sed -i 's/DEPLOYMENTENVIRONMENT/development/g' python-flask-deployment.yml"
                sh "sed -i 's/TAG/$BUILD_NUMBER/g' python-flask-deployment.yml"
                sh "kubectl apply -f python-flask-deployment.yml"
            }
        }
        stage('Promote to Production') {
            steps {
                echo "Promote to production"
            }
            input {
                message "Do you want to Promote the Build to Production"
                ok "Ok"
                submitter "dipashreepatil.25@gmail.com"
                submitterParameter "whoIsSubmitter"
                
            }
        }
        stage('Deploy to Kubernetes Production Environment') {
            steps {
                echo 'Deploy the App using Kubectl'
                sh "sed -i 's/development/production/g' python-flask-deployment.yml"
                sh "sed -i 's/TAG/$BUILD_NUMBER/g' python-flask-deployment.yml"
                sh "kubectl apply -f python-flask-deployment.yml"
            }
        }
        // stage('Integrate terrform '){
        //     steps{
        //         echo 'Deploy Terrform'
        //         sh 'cd terraformdockerinfra'
        //         sh 'pwd'
        //         sh 'terraform fmt'
        //         sh 'terraform validate'
        //         sh 'terraform apply -auto-approve'
        //     }
        // }
        // stage('Integrate Ansible'){
        //     steps{
        //         echo 'Deploy Ansible'
        //         sh 'cd ..'
        //         sh 'ansible-playbook aplaybooksapp2/playbook.yml -i aplaybooksapp2/inventory'
        //     }
        // }

    }
    post {
        always {
            archiveArtifacts artifacts: 'bandit-output.json',onlyIfSuccessful: true
        }
    }
}
